classdef AxesConverter < appmigration.internal.ComponentConverter
    % AXESCONVERTER Converts an axes to a uiaxes
    
    % Copyright 2017-2020 The MathWorks, Inc.
    
    methods
        function [componentCreationFunction, issues] = getComponentCreationFunction(~, ~)
            componentCreationFunction = @uiaxes;
            issues = [];
        end
        
        function conversionFuncs = getCallbackConversionFunctions(~, ~)
            import appmigration.internal.CommonCallbackConversionUtil;
            
            conversionFuncs = {...
                {'ButtonDownFcn', @CommonCallbackConversionUtil.convertOneToOneCallback},...
                {'CreateFcn'    , @CommonCallbackConversionUtil.convertCreateFcn},...
                {'DeleteFcn'    , @CommonCallbackConversionUtil.convertDeleteFcn},...
                };
        end
        
        function conversionFuncs = getPropertyConversionFunctions(~)
            import appmigration.internal.CommonPropertyConversionUtil;
            import appmigration.internal.AxesConverter;
            
            conversionFuncs = {...
                {'BusyAction'      , @CommonPropertyConversionUtil.convertOneToOneProperty},...
                {'Colormap'        , @AxesConverter.convertColormap},...
                {'ContextMenu'     , @CommonPropertyConversionUtil.convertContextMenu},...
                {'FontAngle'       , @CommonPropertyConversionUtil.convertFontAngle},...
                {'FontName'        , @CommonPropertyConversionUtil.convertFontName},...
                {'FontSize'        , @CommonPropertyConversionUtil.convertFontSize},...
                {'FontWeight'      , @CommonPropertyConversionUtil.convertFontWeight},...
                {'HandleVisibility', @CommonPropertyConversionUtil.convertOneToOneProperty},...
                {'Interruptible'   , @CommonPropertyConversionUtil.convertOneToOneProperty},...
                {'NextPlot'        , @CommonPropertyConversionUtil.convertOneToOneProperty},...
                {'Position'        , @AxesConverter.convertPosition},...
                {'Tag'             , @CommonPropertyConversionUtil.convertOneToOneProperty},...
                {'UserData'        , @CommonPropertyConversionUtil.convertUserData},...
                {'Visible'         , @CommonPropertyConversionUtil.convertOneToOneProperty},...
                ...% One-to-one properties to convert if mode is 'manual'
                {{...
                'ALim',...
                'AlphaScale',...
                'Alphamap',...
                'AmbientLightColor',...
                'Box',...
                'BoxStyle',...
                'CLim',...
                'CameraViewAngle',...
                'CameraPosition',...
                'CameraTarget',...
                'CameraUpVector',...
                'Clipping',...
                'ClippingStyle',...
                'Color',...
                'ColorOrder',...
                'ColorOrderIndex',...
                'ColorScale',...
                'DataAspectRatio',...
                'GridAlpha',...
                'GridColor',...
                'GridLineStyle',...
                'HitTest',...
                'LabelFontSizeMultiplier',...
                'Layer',...
                'LineStyleOrder',...
                'LineStyleOrderIndex',...
                'LineWidth',...
                'MinorGridAlpha',...
                'MinorGridColor',...
                'MinorGridLineStyle',...
                'PickableParts',...
                'PlotBoxAspectRatio',...
                'Projection',...
                'SortMethod',...
                'TickDir',...
                'TickLabelInterpreter',...
                'TickLength',...
                'TitleFontWeight',...
                'View',...
                'XAxisLocation',...
                'XColor',...
                'XDir',...
                'XGrid',...
                'XLim',...
                'XLimitMethod',...
                'XMinorGrid',...
                'XMinorTick',...
                'XScale',...
                'XTick',...
                'XTickLabel',...
                'XTickLabelRotation',...
                'YAxisLocation',...
                'YColor',...
                'YDir',...
                'YGrid',...
                'YLim',...
                'YLimitMethod',...
                'YMinorGrid',...
                'YMinorTick',...
                'YScale',...
                'YTick',...
                'YTickLabel',...
                'YTickLabelRotation',...
                'ZColor',...
                'ZDir',...
                'ZGrid',...
                'ZLim',...
                'ZLimitMethod',...
                'ZMinorGrid',...
                'ZMinorTick',...
                'ZScale',...
                'ZTick',...
                'ZTickLabel',...
                'ZTickLabelRotation',...
                }, @AxesConverter.convertOneToOneIfModeIsManual},...
                };
            
            % Properties Implicitly Converted
            %   FontUnits - set to 'pixels' by ComponentConverter.convert()
            %       because this needs to be done prior to doing any
            %       conversions.
            %   Parent - set by ComponentCovnerter.convert()
            %   Units - set to 'pixels' by ComponentConverter.convert()
            %       because this needs to be done prior to doing any
            %       conversions.
            
            % Properties NOT converted and NOT reported:
            %   Not applicable - Not Reported
            %     BeingDeleted - Read-only
            %     CurrentPoint
            %     TightInset
            %   Not supported and no workarounds
            %     FontSmoothing (exists on UIAxes but, under the hood, is a no op)
            %     SelectionHighlight
            %
            %   All public mode properties are not converted because they
            %   will automatically be set when setting the corresponding
            %   property.
        end
    end
    
    methods  (Access = protected)
        function issues = applyPropertyValuePairs(obj, newComponent, pvp)
            % APPLYPROPERTYVALUEPAIRS - Override the superclass method in
            % order to provide additional functionality specific to Axes
            
            % Call the superclass method.
            issues = applyPropertyValuePairs@appmigration.internal.ComponentConverter(obj, newComponent, pvp);
            
            % GUIDE uses Axes (Position = InnerPosition)
            % App Designer uses UIAxes (Position = OuterPosition)
            % Starting in R2020b, UIAxes now has a settable InnerPosition Property
            
            % In order for the migrated UIAxes to be positioned as close as possible
            % to the original Axes, we complete three steps unique to UIAxes:
            % 1. Set the InnerPosition of UIAxes to be equal to the
            % Position of the Axes.  This step automatically changes UIAxes
            % Position and changes InnerPositionMode to 'manual'.  (COMPLETED IN CONVERTPOSITION METHOD)
            % 2. Round the new Position of the UIAxes. (COMPLETED BELOW)
            % 3. Manually set InnerPositionMode of the UIAxes to 'auto'.  This
            % ensures there is no InnerPosition code generation in App
            % Designer. (COMPLETED BELOW)
            
            newComponent.Position = round(newComponent.Position);
            newComponent.InnerPositionMode = 'auto';
        end
        
    end
    
    methods (Static)
        function [pvp, issues] = convertOneToOneIfModeIsManual(guideComponent, props)
            
            pvp = [];
            issues = [];
            
            % Loop over all of the one to one properties unique to axes and
            % only convert them if the user set the value (i.e. mode
            % property is 'manual')
            for i=1:length(props)
                prop = props{i};
                mode = guideComponent.([prop, 'Mode']);
                
                if isequal(mode, 'manual')
                    pvp = [pvp {prop, guideComponent.(prop)}]; %#ok<AGROW>
                end
            end
        end
        
        function [pvp, issues] = convertColormap(guideComponent, prop)
            
            import appmigration.internal.AppConversionIssueFactory;
            
            pvp = [];
            issues = [];
            
            mode = guideComponent.([prop, 'Mode']);
            
            % Colormap is not configurable in App Designer during design
            % time. If the user has changed this value (i.e. mode =
            % 'manual') then report an issue with a workaround of
            % programmatically setting this property using the app's
            % startupfcn.
            if isequal(mode, 'manual')
                issues = AppConversionIssueFactory.createPropertyIssue(...
                    AppConversionIssueFactory.Ids.UnsupportedPropertyAxesColormap,...
                    guideComponent, prop);
            end
        end
        
        function [pvp, issues] = convertPosition(guideComponent, prop) %#ok<INUSD>
            % CONVERTPOSITION - Convert the Position property of the Axes.
            
            % GUIDE uses Axes (Position = InnerPosition)
            % App Designer uses UIAxes (Position = OuterPosition)
            % Starting in R2020b, UIAxes has a settable InnerPosition Property
            
            % In order for the migrated UIAxes to be positioned as close as possible
            % to the original Axes, we complete three steps unique to UIAxes:
            % 1. Set the InnerPosition of UIAxes to be equal to the
            % Position of the Axes.  This step automatically changes UIAxes
            % Position and changes InnerPositionMode to 'manual'.  (COMPLETED BELOW)
            % 2. Round the new Position of the UIAxes. (COMPLETED IN
            % APPLYPROPERTYVALUEPAIRS METHOD)
            % 3. Manually set InnerPositionMode of the UIAxes to 'auto'.  This
            % ensures there is no InnerPosition code generation in App
            % Designer.  (COMPLETED IN APPLYPROPERTYVALUEPAIRS METHOD)
            
            issues = [];
            pvp = {'InnerPosition', guideComponent.InnerPosition};
        end
    end
end